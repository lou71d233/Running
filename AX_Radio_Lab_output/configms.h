/* Warning: This file is automatically generated by AX-RadioLAB.
Manual changes are overwritten! */

#include "../COMMON/axradio.h"

#define VERSION 100
//#define MINI_KIT
//#define USE_LCD
#define USE_DBGLINK
#define USE_COM0
#define DEBUGMSG
//#define MCU_SLEEP
#define WTIMER0_CLKSRC    CLKSRC_LPOSC
#define WTIMER0_PRESCALER 0x01

//#define RADIO_MODE    AXRADIO_MODE_ASYNC_RECEIVE
//#define RADIO_MODE	AXRADIO_MODE_ASYNC_TRANSMIT

//#define RADIO_MODE    AXRADIO_MODE_WOR_RECEIVE
//#define RADIO_MODE    AXRADIO_MODE_WOR_TRANSMIT

#define RADIO_MODE    AXRADIO_MODE_WOR_ACK_RECEIVE
//#define RADIO_MODE    AXRADIO_MODE_WOR_ACK_TRANSMIT

//#define RADIO_MODE    AXRADIO_MODE_ASYNC_TRANSMIT
//#define RADIO_MODE    AXRADIO_MODE_SYNC_SLAVE

#define TX_ON_DEMAND
//#define FXTAL	48000000
#define FXTAL	26000000
#define Tx_packet_len 21

#define CHANGE_RX2TX 0
#define CHANGE_TX2RX 1
#define CHANGE_NONE  2

//#define BUTTON_EDGE_ONE_SHT
#define EXT_POWER_AMP
//#define DEBUG_MSG
#define EXT_TRX
#define PROGRAM_MODE
#define PM_SET 2
#define VD_SET 3

extern const uint8_t __code framing_insert_counter;
extern const uint8_t __code framing_counter_pos;

extern const uint16_t __code lposckfiltmax;

extern const uint16_t __code lpxosc_settlingtime;

extern const uint8_t __code demo_packet[Tx_packet_len+2];
extern const uint8_t __code packet_lock_wheel[Tx_packet_len+2];
extern const uint8_t __code packet_unlock_wheel[Tx_packet_len+2];
//extern uint8_t __code eep00[16],eep01[16],eep02[16];

extern void axradio_set_addr_Switch_Transmit(uint8_t *addr);
extern void axradio_set_addr_Switch_Receive(uint8_t *addr);

extern void set_fm_tx(void);
extern void set_fm_rx(void);

//extern const struct axradio_address __code remoteaddr;
//extern const struct axradio_address_mask __code localaddr;

//#define NOP __asm nop __endasm;
#define NOP()   do {delay(3);} while(0) //1:2.5us ; 2:3.5us ; 3:5us ; 16:20us

#define BIT0SET  0x01
#define BIT1SET  0x02
#define BIT2SET  0x04
#define BIT3SET  0x08
#define BIT4SET  0x10
#define BIT5SET  0x20
#define BIT6SET  0x40
#define BIT7SET  0x80

#define BIT0CLR  0xFE
#define BIT1CLR  0xFD
#define BIT2CLR  0xFB
#define BIT3CLR  0xF7
#define BIT4CLR  0xEF
#define BIT5CLR  0xDF
#define BIT6CLR  0xBF
#define BIT7CLR  0x7F

#define LC_AD0 0x32
#define LC_AD1 0x34
#define LC_AD2 0x00
#define LC_AD3 0x00

#define RM_AD0 0x33
#define RM_AD1 0x34
#define RM_AD2 0x00
#define RM_AD3 0x00

#define SET 1
#define CLR 0


//EXT RF TX_EN & RX_EN

#ifdef EXT_TRX

#define TXENDIR DIRC
#define TXENPORT PORTC

#define RXENDIR DIRB
#define RXENPORT PORTB

#define TXEN_PTN PORTC_0
#define RXEN_PTN PORTB_1

#define TXEN_PIN PINC_0
#define RXEN_PIN PINB_1

#define TXEN_N BIT0SET
#define RXEN_N BIT1SET

#define rf_tx_set()	do {TXENPORT |= (1<<0);} while (0)
#define rf_rx_set()	do {RXENPORT |= (1<<1);} while (0)

#define rf_tx_clr()	do {TXENPORT &= (uint8_t)~(1<<0);} while (0)
#define rf_rx_clr()	do {RXENPORT &= (uint8_t)~(1<<1);} while (0)

#define rf_rx_toggle() do {RXENPORT ^= BIT1SET; } while (0)

#else

#endif // EXT_TRX



#define ee_00 0x0000
#define ee_01 0x0010
#define ee_02 0x0020








